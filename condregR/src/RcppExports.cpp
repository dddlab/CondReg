// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// kgrid_cpp
Rcpp::NumericVector kgrid_cpp(double gridmax, int numpts);
RcppExport SEXP _condregR_kgrid_cpp(SEXP gridmaxSEXP, SEXP numptsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type gridmax(gridmaxSEXP);
    Rcpp::traits::input_parameter< int >::type numpts(numptsSEXP);
    rcpp_result_gen = Rcpp::wrap(kgrid_cpp(gridmax, numpts));
    return rcpp_result_gen;
END_RCPP
}
// condreg_cpp
Rcpp::List condreg_cpp(const Rcpp::NumericMatrix& data_in, double kmax);
RcppExport SEXP _condregR_condreg_cpp(SEXP data_inSEXP, SEXP kmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type data_in(data_inSEXP);
    Rcpp::traits::input_parameter< double >::type kmax(kmaxSEXP);
    rcpp_result_gen = Rcpp::wrap(condreg_cpp(data_in, kmax));
    return rcpp_result_gen;
END_RCPP
}
// select_kmax_cpp
Rcpp::List select_kmax_cpp(const Rcpp::NumericMatrix& X, const Rcpp::NumericVector& k, int folds);
RcppExport SEXP _condregR_select_kmax_cpp(SEXP XSEXP, SEXP kSEXP, SEXP foldsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type folds(foldsSEXP);
    rcpp_result_gen = Rcpp::wrap(select_kmax_cpp(X, k, folds));
    return rcpp_result_gen;
END_RCPP
}
// select_condreg_cpp
Rcpp::List select_condreg_cpp(const Rcpp::NumericMatrix& X, const Rcpp::NumericVector& k, int folds);
RcppExport SEXP _condregR_select_condreg_cpp(SEXP XSEXP, SEXP kSEXP, SEXP foldsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type folds(foldsSEXP);
    rcpp_result_gen = Rcpp::wrap(select_condreg_cpp(X, k, folds));
    return rcpp_result_gen;
END_RCPP
}
// pfweights_cpp
Rcpp::NumericVector pfweights_cpp(const Rcpp::NumericMatrix& sigma);
RcppExport SEXP _condregR_pfweights_cpp(SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(pfweights_cpp(sigma));
    return rcpp_result_gen;
END_RCPP
}
// transcost_cpp
double transcost_cpp(const Rcpp::NumericVector& wnew, const Rcpp::NumericVector& wold, double lastearnings, double reltc, double wealth);
RcppExport SEXP _condregR_transcost_cpp(SEXP wnewSEXP, SEXP woldSEXP, SEXP lastearningsSEXP, SEXP reltcSEXP, SEXP wealthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type wnew(wnewSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type wold(woldSEXP);
    Rcpp::traits::input_parameter< double >::type lastearnings(lastearningsSEXP);
    Rcpp::traits::input_parameter< double >::type reltc(reltcSEXP);
    Rcpp::traits::input_parameter< double >::type wealth(wealthSEXP);
    rcpp_result_gen = Rcpp::wrap(transcost_cpp(wnew, wold, lastearnings, reltc, wealth));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_condregR_kgrid_cpp", (DL_FUNC) &_condregR_kgrid_cpp, 2},
    {"_condregR_condreg_cpp", (DL_FUNC) &_condregR_condreg_cpp, 2},
    {"_condregR_select_kmax_cpp", (DL_FUNC) &_condregR_select_kmax_cpp, 3},
    {"_condregR_select_condreg_cpp", (DL_FUNC) &_condregR_select_condreg_cpp, 3},
    {"_condregR_pfweights_cpp", (DL_FUNC) &_condregR_pfweights_cpp, 1},
    {"_condregR_transcost_cpp", (DL_FUNC) &_condregR_transcost_cpp, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_condregR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
